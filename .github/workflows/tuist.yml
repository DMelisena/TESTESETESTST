name: Tuist CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest
    steps:
      # 1. Check out your repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set the correct Xcode version
      - name: Select Xcode 16.2.0
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2.0'

      # 3. Install Mise and Tuist
      - name: Setup Mise and Tuist
        uses: jdx/mise-action@v2

      # 4. Run Tuist install
      - name: Install dependencies
        run: tuist install
        env:
          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_TOKEN}}

      # 5. Create API key file for build
      - name: Create GenerativeAI-Info.plist
        run: |
          mkdir -p Nemo/Resources
          cat > Nemo/Resources/GenerativeAI-Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>API_KEY</key>
              <string>dummy-api-key-for-ci</string>
          </dict>
          </plist>
          EOF

      # 6. Generate project without building through Tuist
      - name: Generate Xcode project
        run: tuist generate
        env:
          TUIST_CONFIG_TOKEN: ${{ secrets.TUIST_TOKEN}}

      # 7. List available simulators and create one if needed
      - name: Setup simulator
        run: |
          echo "Available simulators:"
          xcrun simctl list devices available
          
          echo "Available runtimes:"
          xcrun simctl list runtimes
          
          # Try to find any available iOS simulator, or create one
          AVAILABLE_SIMULATOR=$(xcrun simctl list devices available | grep "iPhone" | head -1 | grep -o '([A-F0-9\-]*)')
          if [ -z "$AVAILABLE_SIMULATOR" ]; then
            echo "No simulators found, creating one..."
            # Find available iOS runtime
            RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | head -1 | awk '{print $NF}')
            if [ -n "$RUNTIME" ]; then
              xcrun simctl create "CI-iPhone" "com.apple.CoreSimulator.SimDeviceType.iPhone-14" "$RUNTIME"
              AVAILABLE_SIMULATOR=$(xcrun simctl list devices | grep "CI-iPhone" | grep -o '([A-F0-9\-]*)')
            fi
          fi
          
          # Clean up parentheses
          SIMULATOR_ID=$(echo $AVAILABLE_SIMULATOR | tr -d '()')
          echo "Using simulator: $SIMULATOR_ID"
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV

      # 8. Build directly with xcodebuild (bypassing tuist build)
      - name: Build project with xcodebuild
        run: |
          if [ -n "$SIMULATOR_ID" ]; then
            echo "Building with simulator ID: $SIMULATOR_ID"
            xcodebuild build \
              -workspace Nemo.xcworkspace \
              -scheme Nemo \
              -destination "id=$SIMULATOR_ID" \
              CODE_SIGNING_ALLOWED=NO
          else
            echo "Building with generic iOS simulator destination"
            xcodebuild build \
              -workspace Nemo.xcworkspace \
              -scheme Nemo \
              -sdk iphonesimulator \
              -destination "generic/platform=iOS Simulator" \
              CODE_SIGNING_ALLOWED=NO
          fi
